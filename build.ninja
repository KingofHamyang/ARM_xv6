ninja_required_version = 1.3
builddir = out

toolchain = arm-none-eabi-
qemu = qemu-system-arm
qemuopts = -M versatilepb -m 256 -cpu cortex-a9 -nographic

cc = ${toolchain}gcc
as = ${toolchain}as
ld = ${toolchain}ld
objcopy = ${toolchain}objcopy
objdump = ${toolchain}objdump
gdb = ${toolchain}gdb

cflags = -std=c11 -march=armv7-a -mtune=cortex-a9 -nostdinc -nostdlib -mfloat-abi=soft -fno-pic -static -fno-builtin -fno-strict-aliasing -O0 -Wall -ggdb -Wno-unused -Werror -fno-omit-frame-pointer -fno-stack-protector -fno-pie -no-pie -I./include
asflags = -gdwarf-2 -Wa -I./include
user_ldflags = -N -Ttext 0
ldflags = -N


rule c_compile
  command = $cc $cflags -c $in -o $out

rule as_compile
  command = $cc $cflags -c $in -o $out

rule cc_link
  command = $cc $ldflags $in $builddir/initcode $builddir/fs.img -o $out

rule ld_link
  command = $ld -L$builddir -T kernel/kernel.ld -o $out $in $libgcc
rule dump
  command = $objdump -S $in > $out

rule _qemu
  command = echo 'Hit Ctrl + A, then press X to exit...' && $qemu $qemuopts $extra -kernel $in
  pool = console
rule _qemu_gdb
  command = echo 'Run `ninja gdb` in another console.' && $qemu $qemuopts $extra -kernel $in
  pool = console

rule _gdb
  command = echo 'Type `target remote :12345` for debugging.' && $gdb -q $in
  pool = console

rule show_dep_graph
  command = ninja -t graph $in | dot -Tpng -o$out

include tools/tools.ninja
include ulib/ulib.ninja
include user/user.ninja
include kernel/kernel.ninja

build qemu: _qemu $builddir/kernel.elf | $builddir/kernel.asm
build qemu-gdb: _qemu_gdb $builddir/kernel.elf | $builddir/kernel.asm
  extra = -gdb tcp::12345 -S
build gdb: _gdb $builddir/kernel.elf | $builddir/kernel.asm

# You need to install graphviz to export build dependency graph.
build graph.png: show_dep_graph $builddir/kernel.asm

default $builddir/kernel.asm
